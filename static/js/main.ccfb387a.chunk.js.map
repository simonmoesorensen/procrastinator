{"version":3,"sources":["navbar/Navbar.js","grid/AddFeed.js","api-feeds/SearchBar.js","api-feeds/reddit/RedditItem.js","api-feeds/reddit/Reddit.js","api-feeds/Twitter.js","api-feeds/Youtube.js","api-feeds/Instagram.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Row","className","Col","Button","variant","AddFeed","props","state","feed","onSelect","bind","onClick","e","this","setState","value","onAddItem","alert","options","onChange","React","Component","SearchBar","InputGroup","Prepend","Text","FormControl","placeholder","formatToK","number","str","toString","slice","RedditItem","previewImage","file","data","preview","url","includes","images","resolutions","length","replace","subreddit","post_link","permalink","user_link","author","sm","icon","faThumbsUp","ups","faComment","num_comments","lg","href","target","subreddit_name_prefixed","moment","unix","created_utc","fromNow","title","selftext","Parser","ReactHTMLParser","selftext_html","is_video","width","media","reddit_video","height","controls","preload","autoPlay","loop","muted","src","fallback_url","type","alt","Reddit","currentSubreddit","sort","files","after","before","page","defaultValue","handleScroll","scrollHeight","scrollTop","clientHeight","console","log","nextPage","fetch","then","res","json","error","concat","children","catch","sorts","changeSort","changeSubreddit","sub","toLowerCase","obj","onScroll","map","key","id","Twitter","Youtube","Instagram","ResponsiveGridLayout","WidthProvider","Responsive","originalLayouts","getFromLS","originalItems","originalNewCounter","Grid","layouts","JSON","parse","stringify","items","newCounter","layout","saveToLS","i","_","reject","name","x","cols","y","w","h","minW","minH","el","data-grid","onRemoveItem","faTrashAlt","faArrowsAlt","md","xs","xxs","onLayoutChange","draggableHandle","createElement","ls","localStorage","getItem","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccfb387a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './dropdown-style.css';\r\nimport './navbar.css';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <Row className=\"navbar\">\r\n            <Col className=\"d-flex justify-content-end\">\r\n                <Button variant=\"primary\">Login</Button>\r\n                <Button variant=\"secondary\">Sign up</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}","import Dropdown from \"react-dropdown\";\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport './actionbar.css';\r\n\r\nexport default class AddFeed extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            feed: null\r\n        };\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n    };\r\n\r\n    onSelect(e) {\r\n        this.setState({\r\n            feed: e.value\r\n        })\r\n    };\r\n\r\n    onClick() {\r\n        if (this.state.feed) {\r\n            this.props.onAddItem(this.state.feed);\r\n        } else {\r\n            alert('Please choose a feed');\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            feed: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const options = [\"Twitter\", \"Instagram\", \"Youtube\", \"Reddit\"];\r\n\r\n        return (\r\n            <div className=\"actionbar\">\r\n                <h2> Procrastinator feeds </h2>\r\n                <Dropdown options={options} onChange={this.onSelect} value={'Select feed'}/>\r\n                <Button variant=\"primary\" onClick={this.onClick}>Add Item</Button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {InputGroup} from \"react-bootstrap\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Dropdown from \"react-dropdown\";\r\n\r\nexport default class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>\r\n                        r/\r\n                    </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl onChange={this.props.onChange} placeholder='subreddit'/>\r\n            </InputGroup>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Col from \"react-bootstrap/Col\";\r\nimport moment from 'moment';\r\nimport ReactHTMLParser from 'react-html-parser';\r\nimport Parser from 'react-html-parser';\r\nimport {faThumbsUp, faComment, faArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst RedditItem = ({file}) => {\r\n    let previewImage;\r\n    if (file.data.preview && !file.data.url.includes(\".gif\")) {\r\n        previewImage = file.data.preview.images[0].resolutions[file.data.preview.images[0].resolutions.length - 1].url;\r\n        previewImage = previewImage.replace(/&amp;/g, \"&\");\r\n    } else if (file.data.url.includes(\".gifv\")) {\r\n        previewImage = file.data.url.slice(0, file.data.url.length - 1);\r\n    } else if (file.data.url.includes(\".gif\")) {\r\n        previewImage = file.data.url;\r\n    } else {\r\n        previewImage = null;\r\n    }\r\n    let subreddit = \"https://reddit.com/r/\" + file.data.subreddit;\r\n    let post_link = \"https://reddit.com\" + file.data.permalink;\r\n    let user_link = \"https://reddit.com/u/\" + file.data.author;\r\n    // console.log(file.data);\r\n    return (\r\n        <div className='reddit-item'>\r\n            <Col sm='1'>\r\n                <FontAwesomeIcon icon={faThumbsUp}/><br/>{formatToK(file.data.ups)}<br/><br/>\r\n                <FontAwesomeIcon icon={faComment}/><br/>{formatToK(file.data.num_comments)} <br/>\r\n            </Col>\r\n            <Col lg='11'>\r\n                <a href={subreddit} target='_blank'>{file.data.subreddit_name_prefixed}</a><span> | Posted by</span><a\r\n                href={user_link}\r\n                target='_blank'> u/{file.data.author}</a> {moment.unix(file.data.created_utc).fromNow()}\r\n                <a href={post_link} target='_blank'><h3>{file.data.title}</h3></a>\r\n                {file.data.selftext !== \"\" ? <div>{Parser(ReactHTMLParser(file.data.selftext_html))}</div> : ''}\r\n                {\r\n                    file.data.is_video ? <video className=\"reddit-image\"\r\n                                                width={file.data.media.reddit_video.width}\r\n                                                height={file.data.media.reddit_video.height}\r\n                                                controls\r\n                                                preload=\"auto\"\r\n                                                autoPlay=\"autoPlay\"\r\n                                                loop=\"loop\"\r\n                                                muted=\"muted\">\r\n                            <source src={file.data.media.reddit_video.fallback_url} type=\"video/mp4\"/>\r\n                        </video>\r\n                        : previewImage ? <img className='reddit-image' src={previewImage} alt={previewImage}/>\r\n                            : ''\r\n                }\r\n                <br/>\r\n            </Col>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nfunction formatToK(number) {\r\n    var str = number.toString();\r\n    if (number >= 1000) {\r\n        str = str.slice(0,1) + \".\" + str.slice(1,2) + \"k\"\r\n    } else if (number > 10000) {\r\n        str = str.slice(0,2) + \".\" + str.slice(2,3) + \"k\"\r\n    } else if (number > 100000) {\r\n        str = str.slice(0,3) + \"k\"\r\n    }\r\n    return str;\r\n}\r\n\r\nexport default RedditItem;","import React from \"react\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport RedditItem from \"./RedditItem\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport './reddit.css';\r\n\r\nexport default class Reddit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.url = 'https://www.reddit.com/';\r\n        this.sorts = ['Hot', 'New', 'Top', 'Controversial', 'Rising'];\r\n\r\n        this.changeSort = this.changeSort.bind(this);\r\n        this.changeSubreddit = this.changeSubreddit.bind(this);\r\n    }\r\n\r\n    state = {\r\n        currentSubreddit: '',\r\n        sort: 'hot',\r\n        files: [],\r\n        after: null,\r\n        before: null,\r\n        page: 1,\r\n        defaultValue: 'Sort by'\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.changeSubreddit(this.state.currentSubreddit);\r\n    }\r\n\r\n    handleScroll = (e) => {\r\n        const bottom = e.target.scrollHeight - e.target.scrollTop <= e.target.clientHeight;\r\n        if (bottom) {\r\n            console.log('header bottom reached');\r\n            this.nextPage();\r\n        }\r\n    };\r\n\r\n    nextPage = () => {\r\n        fetch(this.url + this.state.currentSubreddit + \"/\" + this.state.sort + \".json?count=\" + (this.state.page * 10 - 1) + \"&after=\" + this.state.after)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                if (!data.error) {\r\n                    this.setState(() => ({\r\n                        files: data ? this.state.files.slice().concat(data.data.children) : this.state.files,\r\n                        after: data.data.after,\r\n                        before: data.data.before,\r\n                        page: this.state.page + 1\r\n                    }))\r\n                }\r\n            }).catch(console.log)\r\n    };\r\n\r\n    changeSubreddit(sub) {\r\n        this.setState({\r\n            files: [],\r\n            currentSubreddit: sub,\r\n            page: 1\r\n        });\r\n        fetch(this.url + sub + \"/\" + this.state.sort + '.json')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                if (!data.error) {\r\n                    this.setState({\r\n                        files: data.data.children,\r\n                        after: data.data.after,\r\n                        before: data.data.before\r\n                    });\r\n                }\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    changeSort(sort) {\r\n        this.setState({\r\n            files: [],\r\n            sort: sort.toLowerCase(),\r\n            page: 1,\r\n            defaultValue: sort\r\n        });\r\n        fetch(this.url + this.state.currentSubreddit + \"/\" + sort.toLowerCase() + '.json')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                if (!data.error) {\r\n                    this.setState({\r\n                        files: data.data.children,\r\n                        after: data.data.after,\r\n                        before: data.data.before\r\n                    });\r\n                }\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    //https://www.reddit.com/r/formuladank/top/.json?count=20\r\n    render() {\r\n        return (\r\n            <div className='feed'>\r\n                <div className='d-flex justify-content-between'>\r\n                    <div>\r\n                        <SearchBar onChange={(obj) => this.changeSubreddit(\"r/\" + obj.target.value)}/>\r\n                    </div>\r\n                    <Dropdown options={this.sorts} onChange={(obj) => this.changeSort(obj.value)} value={this.state.defaultValue}\r\n                              placeholder=\"Select an option\"/>\r\n                </div>\r\n                <div className='reddit-items' onScroll={this.handleScroll}>\r\n                {this.state.files.map((file) => (\r\n                    <RedditItem key={file.data.id} file={file}/>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Twitter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Twitter\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Youtube extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Youtube\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Instagram extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Instagram\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {Responsive, WidthProvider} from 'react-grid-layout';\r\nimport './grid-styles.css'\r\nimport './resizable-styles.css'\r\nimport _ from \"lodash\";\r\nimport AddFeed from './AddFeed'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt, faArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Reddit from \"../api-feeds/reddit/Reddit\";\r\nimport Twitter from \"../api-feeds/Twitter\";\r\nimport Youtube from \"../api-feeds/Youtube\";\r\nimport Instagram from \"../api-feeds/Instagram\";\r\n\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\nconst originalItems = getFromLS(\"items\") || [];\r\nconst originalNewCounter = getFromLS(\"newCount\") + 1 || 0;\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            layouts: JSON.parse(JSON.stringify(originalLayouts)),\r\n            items: JSON.parse(JSON.stringify(originalItems)),\r\n            newCounter: originalNewCounter\r\n        };\r\n\r\n        this.onAddItem = this.onAddItem.bind(this);\r\n    }\r\n\r\n    onLayoutChange(layout, layouts) {\r\n        saveToLS(\"layouts\", layouts);\r\n        this.setState({layouts});\r\n    }\r\n\r\n    onRemoveItem(i) {\r\n        console.log(\"removing\", i);\r\n        this.setState({items: _.reject(this.state.items, {i: i})},\r\n            () => saveToLS(\"items\", this.state.items));\r\n    }\r\n\r\n    onAddItem(name) {\r\n        /*eslint no-console: 0*/\r\n        console.log(\"adding\", \"n\" + this.state.newCounter);\r\n        this.setState({\r\n                // Add a new item. It must have a unique key!\r\n                items: this.state.items.concat({\r\n                    i: name + this.state.newCounter,\r\n                    x: (this.state.items.length * 2) % (this.state.cols || 6),\r\n                    y: 0, // puts it at the bottom\r\n                    w: 3,\r\n                    h: 3,\r\n                    minW: 3,\r\n                    minH: 3,\r\n                    type: name\r\n                }),\r\n                // Increment the counter to ensure key is always unique.\r\n                newCounter: this.state.newCounter + 1\r\n            },\r\n            () =>\r\n                saveToLS(\"items\", this.state.items),\r\n            saveToLS(\"newCount\", this.state.newCounter));\r\n    }\r\n\r\n    createElement(el) {\r\n        const i = el.i;\r\n        return (\r\n            <div key={i} data-grid={el}>\r\n                <span\r\n                    className=\"remove\"\r\n                    onClick={this.onRemoveItem.bind(this, i)}\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></span>\r\n                <span\r\n                    className=\"drag-handle\"\r\n                ><FontAwesomeIcon icon={faArrowsAlt}/></span>\r\n                    {el.type === 'Twitter' ? (\r\n                        <Twitter/>\r\n                    ) : el.type === 'Youtube' ? (\r\n                        <Youtube/>\r\n                    ) : el.type === 'Instagram' ? (\r\n                        <Instagram/>\r\n                    ) : el.type === 'Reddit' ? (\r\n                        <Reddit/>\r\n                    ) : 'No feed.'\r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddFeed onAddItem={this.onAddItem}/>\r\n\r\n                <ResponsiveGridLayout\r\n                    className=\"layout\"\r\n                    layouts={this.state.layouts}\r\n                    // breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\r\n                    cols={{lg: 12, md: 8, sm: 6, xs: 4, xxs: 3}}\r\n                    onLayoutChange={(layout, layouts) =>\r\n                        this.onLayoutChange(layout, layouts)\r\n                    }\r\n                    draggableHandle=\".drag-handle\">\r\n                    {_.map(this.state.items, el => this.createElement(el))}\r\n\r\n                </ResponsiveGridLayout>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nfunction getFromLS(key) {\r\n    let ls = {};\r\n    if (localStorage) {\r\n        try {\r\n            ls = JSON.parse(localStorage.getItem(key)) || {};\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n    if (localStorage) {\r\n        localStorage.setItem(\r\n            key,\r\n            JSON.stringify({\r\n                [key]: value\r\n            })\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './navbar/Navbar.js';\r\nimport Grid from './grid/Grid.js';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar onAddItem={this.onAddItem}/>\r\n                <Grid onAddItem={this.onAddItem}/>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}