{"version":3,"sources":["navbar/Navbar.js","grid/AddFeed.js","api-feeds/Reddit.js","api-feeds/Twitter.js","api-feeds/Youtube.js","api-feeds/Instagram.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Row","className","Col","Button","variant","AddFeed","props","state","feed","onSelect","bind","onClick","e","this","setState","value","onAddItem","alert","options","onChange","placeholder","React","Component","Reddit","Twitter","Youtube","Instagram","ResponsiveGridLayout","WidthProvider","Responsive","originalLayouts","getFromLS","originalItems","originalNewCounter","Grid","layouts","JSON","parse","stringify","items","newCounter","layout","saveToLS","i","console","log","_","reject","name","concat","x","length","cols","y","w","h","type","el","key","data-grid","onRemoveItem","icon","faTrashAlt","lg","md","sm","xs","xxs","onLayoutChange","map","createElement","ls","localStorage","getItem","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.008a035e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './dropdown-style.css';\r\nimport './navbar.css';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <Row className=\"navbar\">\r\n            <Col className=\"d-flex justify-content-end\">\r\n                <Button variant=\"primary\">Login</Button>\r\n                <Button variant=\"secondary\">Sign up</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}","import Dropdown from \"react-dropdown\";\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport './actionbar.css';\r\n\r\nexport default class AddFeed extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            feed: null\r\n        };\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n    };\r\n\r\n    onSelect(e) {\r\n        this.setState({\r\n            feed: e.value\r\n        })\r\n    };\r\n\r\n    onClick() {\r\n        if (this.state.feed) {\r\n            this.props.onAddItem(this.state.feed);\r\n        } else {\r\n            alert('Please choose a feed');\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            feed: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const options = [\"Twitter\", \"Instagram\", \"Youtube\", \"Reddit\"];\r\n\r\n        return (\r\n            <div className=\"actionbar\">\r\n                <h2> Procrastinator feeds </h2>\r\n                <Dropdown options={options} onChange={this.onSelect} value={'Select feed'}\r\n                          placeholder=\"Select an option\"/>\r\n                <Button variant=\"primary\" onClick={this.onClick}>Add Item</Button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\n\r\n\r\nexport default class Reddit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am REDDIT\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Twitter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Twitter\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Youtube extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Youtube\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Instagram extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Instagram\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {Responsive, WidthProvider} from 'react-grid-layout';\r\nimport './grid-styles.css'\r\nimport './resizable-styles.css'\r\nimport _ from \"lodash\";\r\nimport AddFeed from './AddFeed'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Reddit from \"../api-feeds/Reddit\";\r\nimport Twitter from \"../api-feeds/Twitter\";\r\nimport Youtube from \"../api-feeds/Youtube\";\r\nimport Instagram from \"../api-feeds/Instagram\";\r\n\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\nconst originalItems = getFromLS(\"items\") || [];\r\nconst originalNewCounter = getFromLS(\"newCount\") + 1 || 0;\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            layouts: JSON.parse(JSON.stringify(originalLayouts)),\r\n            items: JSON.parse(JSON.stringify(originalItems)),\r\n            newCounter: originalNewCounter\r\n        };\r\n\r\n        this.onAddItem = this.onAddItem.bind(this);\r\n    }\r\n\r\n    onLayoutChange(layout, layouts) {\r\n        saveToLS(\"layouts\", layouts);\r\n        this.setState({layouts});\r\n    }\r\n\r\n    onRemoveItem(i) {\r\n        console.log(\"removing\", i);\r\n        this.setState({items: _.reject(this.state.items, {i: i})},\r\n            () => saveToLS(\"items\", this.state.items));\r\n    }\r\n\r\n    onAddItem(name) {\r\n        /*eslint no-console: 0*/\r\n        console.log(\"adding\", \"n\" + this.state.newCounter);\r\n        this.setState({\r\n                // Add a new item. It must have a unique key!\r\n                items: this.state.items.concat({\r\n                    i: name + this.state.newCounter,\r\n                    x: (this.state.items.length * 2) % (this.state.cols || 6),\r\n                    y: 0, // puts it at the bottom\r\n                    w: 2,\r\n                    h: 2,\r\n                    type: name\r\n                }),\r\n                // Increment the counter to ensure key is always unique.\r\n                newCounter: this.state.newCounter + 1\r\n            },\r\n            () =>\r\n                saveToLS(\"items\", this.state.items),\r\n            saveToLS(\"newCount\", this.state.newCounter));\r\n    }\r\n\r\n    createElement(el) {\r\n        const i = el.i;\r\n        return (\r\n            <div key={i} data-grid={el}>\r\n                <span\r\n                    className=\"remove\"\r\n                    onClick={this.onRemoveItem.bind(this, i)}\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></span>\r\n\r\n                <div>\r\n                    {el.type === 'Twitter' ? (\r\n                        <Twitter/>\r\n                    ) : el.type === 'Youtube' ? (\r\n                        <Youtube/>\r\n                    ) : el.type === 'Instagram' ? (\r\n                        <Instagram/>\r\n                    ) : el.type === 'Reddit' ? (\r\n                        <Reddit/>\r\n                    ) : 'No feed.'\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddFeed onAddItem={this.onAddItem}/>\r\n\r\n                <ResponsiveGridLayout\r\n                    className=\"layout\"\r\n                    layouts={this.state.layouts}\r\n                    // breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\r\n                    cols={{lg: 12, md: 8, sm: 6, xs: 4, xxs: 0}}\r\n                    onLayoutChange={(layout, layouts) =>\r\n                        this.onLayoutChange(layout, layouts)\r\n                    }>\r\n                    {_.map(this.state.items, el => this.createElement(el))}\r\n\r\n                </ResponsiveGridLayout>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nfunction getFromLS(key) {\r\n    let ls = {};\r\n    if (localStorage) {\r\n        try {\r\n            ls = JSON.parse(localStorage.getItem(key)) || {};\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n    if (localStorage) {\r\n        localStorage.setItem(\r\n            key,\r\n            JSON.stringify({\r\n                [key]: value\r\n            })\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './navbar/Navbar.js';\r\nimport Grid from './grid/Grid.js';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar onAddItem={this.onAddItem}/>\r\n                <Grid onAddItem={this.onAddItem}/>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}