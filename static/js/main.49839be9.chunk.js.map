{"version":3,"sources":["navbar/Navbar.js","grid/AddFeed.js","api-feeds/SearchBar.js","api-feeds/reddit/RedditItem.js","api-feeds/reddit/Reddit.js","api-feeds/Twitter.js","api-feeds/Youtube.js","api-feeds/Instagram.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Row","className","Col","Button","variant","AddFeed","props","state","feed","onSelect","bind","onClick","e","this","setState","value","onAddItem","alert","options","onChange","React","Component","SearchBar","InputGroup","Prepend","Text","FormControl","preventDefault","placeholder","RedditItem","previewImage","file","data","preview","images","resolutions","length","url","replace","subreddit","post_link","permalink","user_link","author","console","log","sm","ups","lg","href","target","subreddit_name_prefixed","moment","unix","created_utc","fromNow","title","selftext","Parser","ReactHTMLParser","selftext_html","src","alt","Reddit","currentSubreddit","sort","files","after","before","page","handleScroll","scrollHeight","scrollTop","clientHeight","nextPage","fetch","then","res","json","slice","concat","children","catch","sorts","changeSort","changeSubreddit","sub","window","scrollTo","obj","onScroll","map","key","id","Twitter","Youtube","Instagram","ResponsiveGridLayout","WidthProvider","Responsive","originalLayouts","getFromLS","originalItems","originalNewCounter","Grid","layouts","JSON","parse","stringify","items","newCounter","layout","saveToLS","i","_","reject","name","x","cols","y","w","h","type","el","data-grid","onRemoveItem","icon","faTrashAlt","faArrowsAlt","md","xs","xxs","onLayoutChange","draggableHandle","createElement","ls","localStorage","getItem","setItem","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49839be9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './dropdown-style.css';\r\nimport './navbar.css';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <Row className=\"navbar\">\r\n            <Col className=\"d-flex justify-content-end\">\r\n                <Button variant=\"primary\">Login</Button>\r\n                <Button variant=\"secondary\">Sign up</Button>\r\n            </Col>\r\n        </Row>\r\n    );\r\n\r\n}","import Dropdown from \"react-dropdown\";\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport './actionbar.css';\r\n\r\nexport default class AddFeed extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            feed: null\r\n        };\r\n        this.onSelect = this.onSelect.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n    };\r\n\r\n    onSelect(e) {\r\n        this.setState({\r\n            feed: e.value\r\n        })\r\n    };\r\n\r\n    onClick() {\r\n        if (this.state.feed) {\r\n            this.props.onAddItem(this.state.feed);\r\n        } else {\r\n            alert('Please choose a feed');\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            feed: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const options = [\"Twitter\", \"Instagram\", \"Youtube\", \"Reddit\"];\r\n\r\n        return (\r\n            <div className=\"actionbar\">\r\n                <h2> Procrastinator feeds </h2>\r\n                <Dropdown options={options} onChange={this.onSelect} value={'Select feed'}/>\r\n                <Button variant=\"primary\" onClick={this.onClick}>Add Item</Button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {InputGroup} from \"react-bootstrap\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Dropdown from \"react-dropdown\";\r\n\r\nexport default class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>\r\n                        r/\r\n                    </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl onClick={(e) => e.preventDefault()} placeholder='subreddit'/>\r\n            </InputGroup>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Col from \"react-bootstrap/Col\";\r\nimport moment from 'moment';\r\nimport ReactHTMLParser from 'react-html-parser';\r\nimport Parser from 'react-html-parser';\r\n\r\nconst RedditItem = ({file}) => {\r\n    let previewImage;\r\n    if (file.data.preview) {\r\n        previewImage = file.data.preview.images[0].resolutions[file.data.preview.images[0].resolutions.length - 1].url;\r\n        previewImage = previewImage.replace(/&amp;/g, \"&\");\r\n    } else {\r\n        previewImage = null;\r\n    }\r\n    let subreddit = \"https://reddit.com/r/\" + file.data.subreddit;\r\n    let post_link = \"https://reddit.com\" + file.data.permalink;\r\n    let user_link = \"https://reddit.com/u/\" + file.data.author;\r\n    console.log(file.data);\r\n    return (\r\n        <div className='reddit-item'>\r\n            <Col sm='1'>\r\n                {file.data.ups} <br/> upvotes\r\n            </Col>\r\n            <Col lg='11'>\r\n                <a href={subreddit} target='_blank'>{file.data.subreddit_name_prefixed}</a><span> | Posted by</span><a\r\n                href={user_link} target='_blank'> u/{file.data.author}</a> {moment.unix(file.data.created_utc).fromNow()}\r\n                <a href={post_link} target='_blank'><h3>{file.data.title}</h3></a>\r\n                {file.data.selftext !== \"\" ? <div>{ Parser(ReactHTMLParser(file.data.selftext_html))}</div> : ''}\r\n                {previewImage ? <img className='reddit-image' src={previewImage} alt={previewImage}/> : ''}\r\n                <br/>\r\n                Comments\r\n            </Col>\r\n\r\n\r\n            {/*<Col className=\"\">*/}\r\n            {/*    <a href={post_link} target=\"_blank\" rel=\"noopener noreferrer\"><button className=\"btn btn-secondary btn-sm top-right-float\">View Post</button></a>*/}\r\n            {/*    <a href={file.data.url} target=\"_blank\" rel=\"noopener noreferrer\">*/}\r\n            {/*        {(file.data.over_18) ? <div className=\"p-4\">NSFW</div> : <img src={previewImage} className=\"card-img-top\" width=\"100%\" alt={file.data.title}/>}*/}\r\n            {/*    </a>*/}\r\n            {/*    <div className=\" card-link\">*/}\r\n            {/*        <div className=\"card\">*/}\r\n            {/*            <div className=\"card-img-top\">*/}\r\n\r\n            {/*            </div>*/}\r\n            {/*            <div className=\"card-body\">*/}\r\n            {/*                <div className=\"card-title\">*/}\r\n            {/*                    <a href={file.data.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.data.title}</a>*/}\r\n            {/*                </div>*/}\r\n            {/*                <p className=\"card-text\">*/}\r\n            {/*                    Resolution: {file.data.preview.images[0].source.width}x{file.data.preview.images[0].source.height}*/}\r\n            {/*                    <br/>Posted on: <a href={subreddit} target=\"_blank\" rel=\"noopener noreferrer\">r/{file.data.subreddit}</a>*/}\r\n            {/*                </p>*/}\r\n            {/*            </div>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*</Col>*/}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default RedditItem;","import React from \"react\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport RedditItem from \"./RedditItem\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport './reddit.css';\r\nimport _ from \"lodash\";\r\n\r\n\r\nexport default class Reddit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.url = 'https://www.reddit.com/';\r\n        this.sorts = ['hot', 'new', 'top', 'controversial', 'rising'];\r\n\r\n        this.changeSort = this.changeSort.bind(this);\r\n        this.changeSubreddit = this.changeSubreddit.bind(this);\r\n    }\r\n\r\n    state = {\r\n        currentSubreddit: '',\r\n        sort: 'hot',\r\n        files: [],\r\n        after: null,\r\n        before: null,\r\n        page: 1\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.changeSubreddit(this.state.currentSubreddit);\r\n    }\r\n\r\n    handleScroll = (e) => {\r\n        const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\r\n        if (bottom) {\r\n            console.log('header bottom reached');\r\n            this.nextPage();\r\n        }\r\n    };\r\n\r\n    nextPage = () => {\r\n        fetch(this.url + this.state.currentSubreddit + \"/\" + this.state.sort + \".json?count=\" + (this.state.page * 25) + \"&after=\" + this.state.after)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState(() => ({\r\n                    files: this.state.files.slice().concat(data.data.children),\r\n                    after: data.data.after,\r\n                    before: data.data.before,\r\n                    page: this.state.page + 1\r\n                }));\r\n            })\r\n            .catch(console.log)\r\n    };\r\n\r\n    changeSubreddit(sub) {\r\n        this.setState({\r\n            files: [],\r\n            currentSubreddit: sub,\r\n            page: 1\r\n        });\r\n        fetch(this.url + sub + \"/\" + this.state.sort + '.json')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    files: data.data.children,\r\n                    after: data.data.after,\r\n                    before: data.data.before\r\n                });\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    changeSort(sort) {\r\n        this.setState({\r\n            files: [],\r\n            sort: sort,\r\n            page: 1\r\n        });\r\n        fetch(this.url + this.state.currentSubreddit + \"/\" + sort + '.json')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    files: data.data.children,\r\n                    after: data.data.after,\r\n                    before: data.data.before\r\n                });\r\n                window.scrollTo(0, 0);\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    //https://www.reddit.com/r/formuladank/top/.json?count=20\r\n    render() {\r\n        return (\r\n            <div className='feed'>\r\n                <div className='d-flex justify-content-between'>\r\n                    <div>\r\n                        <SearchBar/>\r\n                    </div>\r\n                    <Dropdown options={this.sorts} onChange={(obj) => this.changeSort(obj.value)} value={'Sort by'}\r\n                              placeholder=\"Select an option\"/>\r\n                </div>\r\n                <div className='reddit-items' onScroll={this.handleScroll}>\r\n                {this.state.files.map((file) => (\r\n                    <RedditItem key={file.data.id} file={file}/>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Twitter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Twitter\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Youtube extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Youtube\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\n\r\nexport default class Instagram extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                I am Instagram\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {Responsive, WidthProvider} from 'react-grid-layout';\r\nimport './grid-styles.css'\r\nimport './resizable-styles.css'\r\nimport _ from \"lodash\";\r\nimport AddFeed from './AddFeed'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt, faArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Reddit from \"../api-feeds/reddit/Reddit\";\r\nimport Twitter from \"../api-feeds/Twitter\";\r\nimport Youtube from \"../api-feeds/Youtube\";\r\nimport Instagram from \"../api-feeds/Instagram\";\r\n\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\nconst originalItems = getFromLS(\"items\") || [];\r\nconst originalNewCounter = getFromLS(\"newCount\") + 1 || 0;\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            layouts: JSON.parse(JSON.stringify(originalLayouts)),\r\n            items: JSON.parse(JSON.stringify(originalItems)),\r\n            newCounter: originalNewCounter\r\n        };\r\n\r\n        this.onAddItem = this.onAddItem.bind(this);\r\n    }\r\n\r\n    onLayoutChange(layout, layouts) {\r\n        saveToLS(\"layouts\", layouts);\r\n        this.setState({layouts});\r\n    }\r\n\r\n    onRemoveItem(i) {\r\n        console.log(\"removing\", i);\r\n        this.setState({items: _.reject(this.state.items, {i: i})},\r\n            () => saveToLS(\"items\", this.state.items));\r\n    }\r\n\r\n    onAddItem(name) {\r\n        /*eslint no-console: 0*/\r\n        console.log(\"adding\", \"n\" + this.state.newCounter);\r\n        this.setState({\r\n                // Add a new item. It must have a unique key!\r\n                items: this.state.items.concat({\r\n                    i: name + this.state.newCounter,\r\n                    x: (this.state.items.length * 2) % (this.state.cols || 6),\r\n                    y: 0, // puts it at the bottom\r\n                    w: 2,\r\n                    h: 2,\r\n                    type: name\r\n                }),\r\n                // Increment the counter to ensure key is always unique.\r\n                newCounter: this.state.newCounter + 1\r\n            },\r\n            () =>\r\n                saveToLS(\"items\", this.state.items),\r\n            saveToLS(\"newCount\", this.state.newCounter));\r\n    }\r\n\r\n    createElement(el) {\r\n        const i = el.i;\r\n        return (\r\n            <div key={i} data-grid={el}>\r\n                <span\r\n                    className=\"remove\"\r\n                    onClick={this.onRemoveItem.bind(this, i)}\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></span>\r\n                <span\r\n                    className=\"drag-handle\"\r\n                ><FontAwesomeIcon icon={faArrowsAlt}/></span>\r\n                    {el.type === 'Twitter' ? (\r\n                        <Twitter/>\r\n                    ) : el.type === 'Youtube' ? (\r\n                        <Youtube/>\r\n                    ) : el.type === 'Instagram' ? (\r\n                        <Instagram/>\r\n                    ) : el.type === 'Reddit' ? (\r\n                        <Reddit/>\r\n                    ) : 'No feed.'\r\n                    }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AddFeed onAddItem={this.onAddItem}/>\r\n\r\n                <ResponsiveGridLayout\r\n                    className=\"layout\"\r\n                    layouts={this.state.layouts}\r\n                    // breakpoints={{lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\r\n                    cols={{lg: 12, md: 8, sm: 6, xs: 4, xxs: 0}}\r\n                    onLayoutChange={(layout, layouts) =>\r\n                        this.onLayoutChange(layout, layouts)\r\n                    }\r\n                    draggableHandle=\".drag-handle\">\r\n                    {_.map(this.state.items, el => this.createElement(el))}\r\n\r\n                </ResponsiveGridLayout>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nfunction getFromLS(key) {\r\n    let ls = {};\r\n    if (localStorage) {\r\n        try {\r\n            ls = JSON.parse(localStorage.getItem(key)) || {};\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n    if (localStorage) {\r\n        localStorage.setItem(\r\n            key,\r\n            JSON.stringify({\r\n                [key]: value\r\n            })\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './navbar/Navbar.js';\r\nimport Grid from './grid/Grid.js';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar onAddItem={this.onAddItem}/>\r\n                <Grid onAddItem={this.onAddItem}/>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}